// 1. Set up a host mount to docker, set up a rule to relabel container metadata for routing and log config
discovery.docker "linux" {
    host = "unix:///var/run/docker.sock"
}

discovery.relabel "logs_integrations_docker" {
    targets = []

    rule {
        source_labels = ["__meta_docker_container_name"]
        regex = "/(.*)"
        target_label = "service_name"
    }
}

// 2. Pull logs from all containers running on Docker
loki.source.docker "default" {
    host       = "unix:///var/run/docker.sock"
    targets    = discovery.docker.linux.targets
    labels     = {"platform" = "docker"}
    relabel_rules = discovery.relabel.logs_integrations_docker.rules
    forward_to = [loki.write.local.receiver]
}

loki.write "local" {
  endpoint {
    url = "http://loki:3100/loki/api/v1/push"
  }
}

// 3. Set up opentelemetry tracing ingester and exporter
otelcol.receiver.otlp "default" {
    http {}
    grpc {}

    output {
        traces = [otelcol.processor.batch.default.input]
    }
}

otelcol.processor.batch "default" {
    output {
        traces = [otelcol.exporter.otlp.tempo.input]
    }
}

otelcol.exporter.otlp "tempo" {
    client {
        endpoint = "tempo:4317"
        tls {
            insecure = true
        }
    }
}

// 4. Set up metric ingester and exporter from docker container
prometheus.exporter.cadvisor "local" {
  docker_host = "unix:///var/run/docker.sock"

  storage_duration = "5m"
}

prometheus.scrape "scraper" {
  targets    = prometheus.exporter.cadvisor.local.targets
  forward_to = [ prometheus.remote_write.default.receiver ]

  scrape_interval = "10s"
}

prometheus.remote_write "default" {
  endpoint {
    url = "http://prometheus:9090/api/v1/write"
  }
}

// 5. Set up metric ingester and exporter from host machine
prometheus.exporter.unix "integrations_node_exporter" {
  disable_collectors = ["ipvs", "btrfs", "infiniband", "xfs", "zfs"]
  enable_collectors = ["meminfo"]

  filesystem {
    fs_types_exclude     = "^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|tmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$"
    mount_points_exclude = "^/(dev|proc|run/credentials/.+|sys|var/lib/docker/.+)($|/)"
    mount_timeout        = "5s"
  }

  netclass {
    ignored_devices = "^(veth.*|cali.*|[a-f0-9]{15})$"
  }

  netdev {
    device_exclude = "^(veth.*|cali.*|[a-f0-9]{15})$"
  }
}

discovery.relabel "integrations_node_exporter" {
  targets = prometheus.exporter.unix.integrations_node_exporter.targets

  rule {
    target_label = "instance"
    replacement  = constants.hostname
  }

  rule {
    target_label = "job"
    replacement = "integrations/node_exporter"
  }
}

prometheus.scrape "integrations_node_exporter" {
  scrape_interval = "15s"
  targets    = discovery.relabel.integrations_node_exporter.output
  forward_to = [prometheus.remote_write.default.receiver]
}
